#!/usr/bin/env perl

use strict;
use warnings;
use FindBin qw($Bin);
use lib ( -d "$Bin/../lib/perl5" ? "$Bin/../lib/perl5" : "$Bin/../lib" );
use Carp;
use English qw(-no_match_vars);
use POSIX qw(strftime);
use Readonly;
use Try::Tiny;
use List::MoreUtils qw(any);

use npg_tracking::Schema;
use Monitor::Staging;
use Monitor::RunFolder::Staging;

our $VERSION = '0';

Readonly::Scalar my $SLEEP_INTERVAL => 60 * 15;
Readonly::Scalar my $DRY_RUN => $ENV{'dev'} && ($ENV{'dev'} ne 'live');

local $OUTPUT_AUTOFLUSH = 1;

sub _log {
    my @ms = map { "\t$_\n" } @_;
    print {*STDOUT}  @ms or carp $OS_ERROR;
}

sub _log_noindent {
    my @ms = map { "\n$_\n" } @_;
    print {*STDOUT} @ms or carp $OS_ERROR;
}

_log_noindent($DRY_RUN ? 'DRY RUN, no run folder moves' : 'LIVE RUN');

main();

###########################################################
###############   Main daemon loop.  ######################
###########################################################

sub main {

    my $schema  = npg_tracking::Schema->connect();
    my $monitor = Monitor::Staging->new(schema => $schema);
    my $staging_area = $monitor->validate_areas(@ARGV);

    my $time = sub {
        return strftime '%a %b %e %T %Y%n', localtime;
    };

    my $previous_size_of = {};

    while (1) {

        _log_noindent($time->());

        foreach my $run_path ( $monitor->find_live($staging_area) ) {
            _log_noindent("Considering $run_path");
            my $done;
            try {
                $done = Monitor::RunFolder::Staging->new(
                   runfolder_path      => $run_path,
                   npg_tracking_schema => $schema)->update_run_from_path($previous_size_of, $DRY_RUN);
            } finally {
                if (@_) {
                    _log("ERROR: Execution for $run_path died with: @_\n");
                } else {
                    _log("Succesfully processed $run_path");
                }
            };
            $done and delete $previous_size_of->{$run_path};
        }

        _log_noindent("Gone to sleep for $SLEEP_INTERVAL seconds at " . $time->());
        sleep $SLEEP_INTERVAL;
    } 
}

1;

__END__

=head1 NAME

staging_area_monitor

=head1 VERSION

=head1 SYNOPSIS

  # Assuming staging_area_path is an existing path

  staging_area_monitor staging_area_path 

=head1 DESCRIPTION

Monitors one staging area. The staging area path is supplied as a
command-line argument.

The script runs an infinite loop so do not call it via a crontab.

Actions for runs in the incoming directory:

If the run has a status of 'run complete' check to make sure that all activity
has stopped (no change in the sum of file sizes, no modtimes in advance of the
present). When this is the case run some validation checks, set the status to
'run mirrored' and move the run folder to 'analysis'.

Actions for runs in analysis directory:

If the run status is 'qc complete', the run is moved to the outgoing directory.

=head1 SUBROUTINES/METHODS

None

=head1 CONFIGURATION AND ENVIRONMENT

If dev environment variable is set to any value that is not 'live', the script
has full functionality, but changes to the file system are not performed.
Development tracking database is used in this case.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

None known.

=head1 AUTHOR

John O'Brien
Marina Gourtovaia

=head1 LICENCE AND COPYRIGHT

Copyright (C) 2013,2014,2015,2018,2019,2020,2023 Genome Research Ltd.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
